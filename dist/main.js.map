{"version":3,"file":"main.js","mappingszzvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://gemini-conversation-folders-addon/./src/scripts/dragAndDrop.js","webpack://gemini-conversation-folders-addon/./src/scripts/eventHandler.js","webpack://gemini-conversation-folders-addon/./src/scripts/folderManager.js","webpack://gemini-conversation-folders-addon/./src/scripts/storage.js","webpack://gemini-conversation-folders-addon/./src/scripts/ui.js","webpack://gemini-conversation-folders-addon/webpack/bootstrap","webpack://gemini-conversation-folders-addon/webpack/runtime/define property getters","webpack://gemini-conversation-folders-addon/webpack/runtime/hasOwnProperty shorthand","webpack://gemini-conversation-folders-addon/webpack/runtime/make namespace object","webpack://gemini-conversation-folders-addon/./src/scripts/app.js"],"sourcesContent":["export default class DragAndDrop {\n    constructor(storage, folderManager) {\n        this.storage = storage;\n        this.folderManager = folderManager;\n    }\n\n    handleDragStart(event) {\n        const geminiConversationElement = event.target.closest('.chat-history-list .conversation[data-test-id=\"conversation\"]');\n        const savedConversationElement = event.target.closest('.conversation-item-wrapper[draggable=\"true\"]');\n        let conversationData;\n\n        if (geminiConversationElement) {\n            const titleElement = geminiConversationElement.querySelector('.conversation-title');\n            const convTitle = titleElement ? titleElement.textContent.trim() : 'Conversación sin título';\n            let realConversationId = null;\n            let convUrl = '';\n\n            const jslogAttribute = geminiConversationElement.getAttribute('jslog');\n            if (jslogAttribute) {\n                const match = jslogAttribute.match(/BardVeMetadataKey:\\[[^\\]]*\\x22c_([^\\x22]+)\\x22/);\n                if (match && match[1]) {\n                    realConversationId = match[1];\n                    convUrl = `https://gemini.google.com/app/${realConversationId}`;\n                }\n            }\n\n            if (!realConversationId && geminiConversationElement.classList.contains('selected')) {\n                realConversationId = extractRealConversationIdFromCurrentUrl();\n                if (realConversationId) {\n                    convUrl = `https://gemini.google.com/app/${realConversationId}`;\n                }\n            }\n\n            if (!realConversationId) {\n                realConversationId = 'fallback_' + Date.now().toString();\n            }\n\n            conversationData = {\n                id: realConversationId,\n                title: convTitle,\n                url: convUrl || window.location.href,\n                folder_from: null,\n                original_index: -1\n            };\n            geminiConversationElement.classList.add('is-dragging');\n        } else if (savedConversationElement) {\n            conversationData = {\n                id: savedConversationElement.dataset.convId,\n                title: savedConversationElement.dataset.convTitle,\n                url: savedConversationElement.dataset.convUrl,\n                folder_from: savedConversationElement.dataset.folderName,\n                original_index: parseInt(savedConversationElement.dataset.originalIndex)\n            };\n            savedConversationElement.classList.add('is-dragging');\n        } else {\n            event.preventDefault();\n            return;\n        }\n\n        event.dataTransfer.setData('application/json', JSON.stringify(conversationData));\n        event.dataTransfer.effectAllowed = 'move';\n    }\n\n    handleDragOver(event) {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n        if (event.currentTarget && event.currentTarget.classList.contains('title-container')) {\n            event.currentTarget.classList.add('drag-over');\n        }\n    }\n\n    handleDragLeave(event) {\n        if (event.currentTarget && event.currentTarget.classList.contains('title-container')) {\n            event.currentTarget.classList.remove('drag-over');\n        }\n        event.currentTarget.querySelectorAll('.drag-over-top, .drag-over-bottom').forEach(el => {\n            el.classList.remove('drag-over-top', 'drag-over-bottom');\n        });\n    }\n\n    async handleDrop(event) {\n        event.preventDefault();\n        if (event.currentTarget && event.currentTarget.classList.contains('title-container')) {\n            event.currentTarget.classList.remove('drag-over');\n        }\n\n        const droppedData = event.dataTransfer.getData('application/json');\n        if (!droppedData) return;\n\n        const conversation = JSON.parse(droppedData);\n        const targetFolderName = event.currentTarget.dataset.folderName;\n        const sourceFolderName = conversation.folder_from;\n\n        if (!targetFolderName) return;\n\n        const storedFolders = await this.storage.getFolders();\n\n        if (sourceFolderName && sourceFolderName !== targetFolderName) {\n            storedFolders[sourceFolderName] = storedFolders[sourceFolderName].filter(c => c.id !== conversation.id);\n        }\n\n        if (!storedFolders[targetFolderName].some(c => c.id === conversation.id)) {\n            storedFolders[targetFolderName].push({ id: conversation.id, title: conversation.title, url: conversation.url, timestamp: new Date().toLocaleString() });\n        }\n\n        await this.storage.saveFolders(storedFolders);\n        this.folderManager.loadAndDisplayFolders();\n        showToast(`Conversación movida a \"${targetFolderName}\"`, 'success');\n    }\n\n    handleConversationListDragOver(event) {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n        const targetItem = event.target.closest('.conversation-item-wrapper');\n        const conversationList = event.currentTarget;\n        conversationList.querySelectorAll('.drag-over-top, .drag-over-bottom').forEach(el => el.classList.remove('drag-over-top', 'drag-over-bottom'));\n\n        if (targetItem) {\n            const boundingBox = targetItem.getBoundingClientRect();\n            const offset = event.clientY - boundingBox.top;\n            if (offset < boundingBox.height / 2) {\n                targetItem.classList.add('drag-over-top');\n            } else {\n                targetItem.classList.add('drag-over-bottom');\n            }\n        } else {\n            conversationList.classList.add('drag-over-bottom');\n        }\n    }\n\n    async handleConversationListDrop(event) {\n        event.preventDefault();\n        event.currentTarget.querySelectorAll('.drag-over-top, .drag-over-bottom').forEach(el => el.classList.remove('drag-over-top', 'drag-over-bottom'));\n\n        const droppedData = event.dataTransfer.getData('application/json');\n        if (!droppedData) return;\n\n        const conversation = JSON.parse(droppedData);\n        const targetFolderName = event.currentTarget.dataset.folderName;\n        const sourceFolderName = conversation.folder_from;\n        const originalIndex = conversation.original_index;\n\n        if (!targetFolderName) return;\n\n        const storedFolders = await this.storage.getFolders();\n        const targetItem = event.target.closest('.conversation-item-wrapper');\n        let newIndex;\n\n        if (targetItem) {\n            const boundingBox = targetItem.getBoundingClientRect();\n            const offset = event.clientY - boundingBox.top;\n            const targetIndex = Array.from(targetItem.parentNode.children).indexOf(targetItem);\n            newIndex = (offset < boundingBox.height / 2) ? targetIndex : targetIndex + 1;\n        } else {\n            newIndex = storedFolders[targetFolderName].length;\n        }\n\n        if (sourceFolderName === targetFolderName) {\n            const [movedConversation] = storedFolders[targetFolderName].splice(originalIndex, 1);\n            storedFolders[targetFolderName].splice(newIndex > originalIndex ? newIndex - 1 : newIndex, 0, movedConversation);\n        } else {\n            if (sourceFolderName) {\n                storedFolders[sourceFolderName] = storedFolders[sourceFolderName].filter(c => c.id !== conversation.id);\n            }\n            if (!storedFolders[targetFolderName].some(c => c.id === conversation.id)) {\n                storedFolders[targetFolderName].splice(newIndex, 0, { id: conversation.id, title: conversation.title, url: conversation.url, timestamp: new Date().toLocaleString() });\n            }\n        }\n\n        await this.storage.saveFolders(storedFolders);\n        this.folderManager.loadAndDisplayFolders();\n        showToast('Conversación reordenada', 'success');\n    }\n\n    async setupDraggableConversations() {\n        const recentConversations = document.querySelectorAll('.chat-history-list .conversation[data-test-id=\"conversation\"]');\n\n        const allSavedConversations = await this.storage.getFolders();\n        const savedIds = new Set();\n        for (const folderName in allSavedConversations) {\n            allSavedConversations[folderName].forEach(conv => savedIds.add(conv.id));\n        }\n\n        recentConversations.forEach(convElement => {\n            if (!convElement.hasAttribute('data-draggable-setup')) {\n                convElement.setAttribute('draggable', 'true');\n                convElement.addEventListener('dragstart', this.handleDragStart.bind(this));\n                convElement.addEventListener('dragend', (event) => event.target.classList.remove('is-dragging'));\n                convElement.setAttribute('data-draggable-setup', 'true');\n            }\n\n            const jslogAttribute = convElement.getAttribute('jslog');\n            let realConversationId = null;\n            if (jslogAttribute) {\n                const match = jslogAttribute.match(/BardVeMetadataKey:\\[[^\\]]*\\x22c_([^\\x22]+)\\x22/);\n                if (match && match[1]) {\n                    realConversationId = match[1];\n                }\n            }\n\n            const titleElement = convElement.querySelector('.conversation-title');\n\n            if (realConversationId && savedIds.has(realConversationId)) {\n                convElement.classList.add('is-saved');\n                \n                // Lógica para agregar el ícono si no existe\n                let icon = titleElement.querySelector('.gemini-organizer-saved-icon');\n                if (!icon) {\n                    icon = document.createElement('span');\n                    icon.classList.add('gemini-organizer-saved-icon');\n                    icon.textContent = '📁';\n                    titleElement.insertBefore(icon, titleElement.firstChild);\n                }\n            } else {\n                convElement.classList.remove('is-saved');\n                // Lógica para eliminar el ícono si existe\n                const icon = titleElement.querySelector('.gemini-organizer-saved-icon');\n                if (icon) {\n                    icon.remove();\n                }\n            }\n        });\n    }\n}\n","export default class EventHandler {\n    constructor(ui, folderManager, dragAndDropHandler) {\n        this.ui = ui;\n        this.folderManager = folderManager;\n        this.dragAndDropHandler = dragAndDropHandler;\n    }\n\n    addEventListeners() {\n        const createFolderSectionBtn = document.getElementById('create-folder-section-btn');\n        if (createFolderSectionBtn) {\n            createFolderSectionBtn.addEventListener('click', () => this.ui.toggleSectionVisibility('create-folder-container'));\n        }\n\n        const searchSectionBtn = document.getElementById('search-section-btn');\n        if (searchSectionBtn) {\n            searchSectionBtn.addEventListener('click', () => this.ui.toggleSectionVisibility('search-conversations-container'));\n        }\n\n\n        const createFolderBtn = document.getElementById('create-folder-btn');\n        if (createFolderBtn) {\n            createFolderBtn.addEventListener('click', this.folderManager.createFolder.bind(this.folderManager));\n        }\n\n        const searchInput = document.getElementById('search-conversations-input');\n        if (searchInput) {\n            searchInput.addEventListener('input', this.ui.filterConversationsAndFolders.bind(this.ui));\n        }\n\n        if (this.ui.toggleButton) {\n            this.ui.toggleButton.addEventListener('click', this.ui.toggleSidebarVisibility.bind(this.ui));\n        }\n    }\n\n    addFolderInteractionListeners(folderHeader, conversationsWrapper, expandIcon, editButton, deleteButton, folderName, folderTitle) {\n        folderHeader.addEventListener('click', () => {\n            conversationsWrapper.classList.toggle('hidden');\n            const isHidden = conversationsWrapper.classList.contains('hidden');\n            expandIcon.setAttribute('fonticon', isHidden ? 'expand_more' : 'expand_less');\n            expandIcon.setAttribute('data-mat-icon-name', isHidden ? 'expand_more' : 'expand_less');\n        });\n\n        editButton.addEventListener('click', (event) => {\n            event.stopPropagation();\n            this.ui.enableFolderEditMode(folderName, folderTitle, deleteButton, editButton, expandIcon, this);\n        });\n\n        deleteButton.addEventListener('click', this.folderManager.deleteFolder.bind(this.folderManager));\n    }\n\n    addFolderRenameListeners(inputField, originalFolderName, folderTitleElement, deleteBtn, editBtn, expandIcon) {\n        inputField.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.folderManager.saveFolderRename(inputField, originalFolderName, folderTitleElement, deleteBtn, editBtn, expandIcon);\n            }\n        });\n\n        inputField.addEventListener('blur', () => {\n            this.folderManager.saveFolderRename(inputField, originalFolderName, folderTitleElement, deleteBtn, editBtn, expandIcon);\n        });\n    }\n\n    addConversationListeners(convItem) {\n        const convTitle = convItem.querySelector('.conversation-title');\n        if (convTitle) {\n            convTitle.addEventListener('click', this.ui.openGeminiChat.bind(this.ui));\n        }\n\n        const deleteButton = convItem.querySelector('.delete-conversation-btn');\n        if (deleteButton) {\n            deleteButton.addEventListener('click', this.folderManager.deleteConversation.bind(this.folderManager));\n        }\n    }\n}","export default class FolderManager {\n    constructor(storage, ui) {\n        this.storage = storage;\n        this.ui = ui;\n    }\n\n    async loadAndDisplayFolders() {\n        const openFolderStates = this.getOpenFolderStates();\n        const folders = await this.storage.getFolders();\n        this.ui.renderFolders(folders, openFolderStates, this.eventHandler, this.dragAndDropHandler);\n    }\n\n    async createFolder() {\n        const newFolderNameInput = document.getElementById('new-folder-name');\n        const folderName = newFolderNameInput.value.trim();\n\n        if (folderName) {\n            const storedFolders = await this.storage.getFolders();\n\n            if (!storedFolders[folderName]) {\n                storedFolders[folderName] = [];\n                await this.storage.saveFolders(storedFolders);\n                newFolderNameInput.value = '';\n                this.loadAndDisplayFolders();\n                showToast(`Carpeta \"${folderName}\" creada exitosamente.`, 'success');\n            } else {\n                showToast(`La carpeta \"${folderName}\" ya existe.`, 'warning');\n            }\n        } else {\n            showToast(\"Por favor, ingresa un nombre para la carpeta.\", 'warning');\n        }\n    }\n\n    async saveFolderRename(inputField, originalFolderName, folderTitleElement, deleteBtn, editBtn, expandIcon) {\n        const newFolderName = inputField.value.trim();\n\n        if (!inputField.parentNode) {\n            return;\n        }\n\n        if (newFolderName === originalFolderName) {\n            inputField.remove();\n            folderTitleElement.style.display = 'block';\n            deleteBtn.style.display = 'block';\n            editBtn.style.display = 'block';\n            expandIcon.style.display = 'block';\n            return;\n        }\n\n        if (!newFolderName) {\n            showToast(\"El nombre de la carpeta no puede estar vacío. Se restaurará el nombre original.\", 'warning');\n            inputField.remove();\n            folderTitleElement.style.display = 'block';\n            deleteBtn.style.display = 'block';\n            editBtn.style.display = 'block';\n            expandIcon.style.display = 'block';\n            return;\n        }\n\n        const storedFolders = await this.storage.getFolders();\n\n        if (storedFolders[newFolderName] && newFolderName !== originalFolderName) {\n            showToast(`Ya existe una carpeta con el nombre \"${newFolderName}\". Por favor, elige un nombre diferente.`, 'warning');\n            inputField.remove();\n            folderTitleElement.style.display = 'block';\n            deleteBtn.style.display = 'block';\n            editBtn.style.display = 'block';\n            expandIcon.style.display = 'block';\n            return;\n        }\n\n        const folderContent = storedFolders[originalFolderName];\n        delete storedFolders[originalFolderName];\n        storedFolders[newFolderName] = folderContent;\n\n        await this.storage.saveFolders(storedFolders);\n        showToast(`Carpeta \"${originalFolderName}\" renombrada a \"${newFolderName}\" exitosamente.`, 'success');\n\n        inputField.remove();\n        this.loadAndDisplayFolders();\n    }\n\n    async deleteFolder(event) {\n        event.stopPropagation();\n        const folderName = event.currentTarget.dataset.folderName;\n\n        if (!folderName) {\n            showToast('Hubo un error al intentar eliminar la carpeta.', 'error');\n            return;\n        }\n\n        if (!confirm(`¿Estás seguro de que quieres eliminar la carpeta \"${folderName}\"?`)) {\n            return;\n        }\n\n        const storedFolders = await this.storage.getFolders();\n\n        if (storedFolders[folderName]) {\n            delete storedFolders[folderName];\n            await this.storage.saveFolders(storedFolders);\n            showToast(`Carpeta \"${folderName}\" eliminada.`, 'success');\n            this.loadAndDisplayFolders();\n        } else {\n            showToast(\"La carpeta especificada no existe.\", 'error');\n        }\n    }\n\n    async deleteConversation(event) {\n        if (!confirm('¿Estás seguro de que quieres eliminar esta conversación?')) {\n            return;\n        }\n\n        const folderName = event.currentTarget.dataset.folderName;\n        const convId = event.currentTarget.dataset.convId;\n\n        if (!folderName || !convId) {\n            showToast('Hubo un error al intentar eliminar la conversación.', 'error');\n            return;\n        }\n\n        const storedFolders = await this.storage.getFolders();\n\n        if (storedFolders[folderName]) {\n            storedFolders[folderName] = storedFolders[folderName].filter(conv => conv.id !== convId);\n            await this.storage.saveFolders(storedFolders);\n            showToast(\"Conversación eliminada.\", 'success');\n            this.loadAndDisplayFolders();\n        } else {\n            showToast(\"La carpeta especificada no existe.\", 'error');\n        }\n    }\n\n    getOpenFolderStates() {\n        const openFolderStates = {};\n        const foldersListUl = document.getElementById('folders-list-ul');\n        if (foldersListUl) {\n            foldersListUl.querySelectorAll('.gemini-folder-item').forEach(folderItem => {\n                const folderName = folderItem.querySelector('.gemini-folder-title').dataset.folderName;\n                const conversationsWrapper = folderItem.querySelector('.conversations-list-wrapper');\n                if (conversationsWrapper && !conversationsWrapper.classList.contains('hidden')) {\n                    openFolderStates[folderName] = true;\n                }\n            });\n        }\n        return openFolderStates;\n    }\n\n    async saveCurrentConversation(targetFolderName) {\n        const url = window.location.href;\n        const convId = extractRealConversationIdFromCurrentUrl();\n        const convTitle = extractConversationTitle();\n\n        if (!convId || !convTitle) {\n            showToast(\"No se pudo obtener la información de la conversación actual.\", 'error');\n            return;\n        }\n\n        const storedFolders = await this.storage.getFolders();\n        \n        // Se asegura que la carpeta de destino exista\n        if (!storedFolders[targetFolderName]) {\n             showToast(`La carpeta \"${targetFolderName}\" no existe.`, 'error');\n             return;\n        }\n\n        const existingConversation = storedFolders[targetFolderName].find(c => c.id === convId);\n        if (existingConversation) {\n            showToast(\"Esta conversación ya está guardada en esta carpeta.\", 'info');\n            return;\n        }\n\n        storedFolders[targetFolderName].push({ id: convId, title: convTitle, url: url, timestamp: new Date().toLocaleString() });\n\n        await this.storage.saveFolders(storedFolders);\n        showToast(`Conversación guardada en la carpeta \"${targetFolderName}\".`, 'success');\n        this.loadAndDisplayFolders();\n    }\n\n    setEventHandler(eventHandler) {\n        this.eventHandler = eventHandler;\n    }\n\n    setDragAndDropHandler(dragAndDropHandler) {\n        this.dragAndDropHandler = dragAndDropHandler;\n    }\n}\n","export default class  Storage {\n    constructor(key) {\n        this.key = key;\n        this.storageArea = chrome.storage.local; \n    }\n\n    /**\n     * Establece el área de almacenamiento a 'local' o 'sync'.\n     * @param {string} area - 'local' o 'sync'.\n     */\n    setStorageArea(area) {\n        if (area === 'sync') {\n            this.storageArea = chrome.storage.sync;\n        } else {\n            this.storageArea = chrome.storage.local;\n        }\n        console.log(`Área de almacenamiento establecida en: ${area}`);\n    }\n\n    async getFolders() {\n        // Usamos la propiedad dinámica 'storageArea'\n        const data = await this.storageArea.get(this.key);\n        return data[this.key] || {};\n    }\n\n    async saveFolders(folders) {\n        // Usamos la propiedad dinámica 'storageArea'\n        return this.storageArea.set({ [this.key]: folders });\n    }\n\n    /**\n     * Obtiene la configuración de sincronización del usuario.\n     * @returns {Promise<boolean>} - true si la sincronización está habilitada, false en caso contrario.\n     */\n    async getSyncEnabled() {\n        const data = await chrome.storage.sync.get('syncEnabled');\n        return data.syncEnabled || false;\n    }\n\n    /**\n     * Guarda la configuración de sincronización del usuario.\n     * @param {boolean} enabled - El estado de la sincronización.\n     */\n    async setSyncEnabled(enabled) {\n        return chrome.storage.sync.set({ syncEnabled: enabled });\n    }\n}","export default class UI {\n    constructor() {\n        this.sidebar = null;\n        this.toggleButton = null;\n        this.activeSection = null;\n    }\n\n    initializeSidebar() {\n        let sidebar = document.getElementById('gemini-organizer-sidebar');\n        if (!sidebar) {\n            sidebar = document.createElement('div');\n            sidebar.id = 'gemini-organizer-sidebar';\n            sidebar.classList.add('hidden');\n            sidebar.innerHTML = `\n                <div class=\"sidebar-actions\">\n                    <div class=\"action-buttons-group\">\n                        <button id=\"create-folder-section-btn\" class=\"sidebar-action-btn\">\n                            <mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"create_new_folder\" fonticon=\"add\"></mat-icon>\n                            <span>Carpeta</span>\n                        </button>\n                        <button id=\"search-section-btn\" class=\"sidebar-action-btn\">\n                            <mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"search\" fonticon=\"search\"></mat-icon>\n                            <span>Buscar</span>\n                        </button>\n                    </div>\n                    <button id=\"open-options-btn\" class=\"settings-btn\" title=\"Abrir configuración\">\n                        <mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"settings\" fonticon=\"settings\"></mat-icon>\n                    </button>\n                </div>\n                <div id=\"create-folder-container\" class=\"collapsible-section hidden\">\n                    <div class=\"folder-controls\">\n                        <h4>Crear Nueva Carpeta</h4>\n                        <div class=\"input-with-button-wrapper\">\n                            <input type=\"text\" id=\"new-folder-name\" placeholder=\"Mi carpeta...\">\n                            <button id=\"create-folder-btn\" title=\"Crear Carpeta\">\n                                <mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"add\" fonticon=\"add\"></mat-icon>\n                            </button>\n                        </div>\n                        </div>\n                </div>\n                <div id=\"search-conversations-container\" class=\"collapsible-section hidden\">\n                    <div class=\"search-controls\">\n                        <h4>Buscar Conversaciones</h4>\n                        <div class=\"input-with-button-wrapper\">\n                            <mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"search\" fonticon=\"search\"></mat-icon>\n                            <input type=\"search\" id=\"search-conversations-input\" placeholder=\"Buscar en tus carpetas...\">\n                        </div>\n                        </div>\n                </div>\n                <div class=\"folders-list\">\n                    <h4 class=\"title gds-label-l\" style=\"margin-left: 16px; margin-bottom: 10px;\">Tus Carpetas Guardadas</h4>\n                    <ul id=\"folders-list-ul\"></ul>\n                </div>\n            `;\n                \n\n        }\n        this.sidebar = sidebar;\n        return sidebar;\n    }\n\n\n    addToggleButton(eventHandler, folderManager) {\n        const discoverGemsButtonWrapper = document.querySelector('side-nav-action-button[data-test-id=\"manage-instructions-control\"]');\n\n        if (discoverGemsButtonWrapper) {\n            let ourButtonWrapper = document.getElementById('gemini-organizer-wrapper');\n\n            if (!ourButtonWrapper) {\n                ourButtonWrapper = document.createElement('side-nav-action-button');\n                ourButtonWrapper.id = 'gemini-organizer-wrapper';\n                ourButtonWrapper.setAttribute('icon', 'folder_open');\n                ourButtonWrapper.setAttribute('arialabel', 'Organizador de Conversaciones');\n                ourButtonWrapper.setAttribute('data-test-id', 'gemini-organizer-button');\n                ourButtonWrapper.classList.add('mat-mdc-tooltip-trigger', 'ia-redesign', 'ng-star-inserted');\n\n                const button = document.createElement('button');\n                button.id = 'gemini-organizer-toggle-btn';\n                button.classList.add(\n                    'mat-mdc-list-item', 'mdc-list-item', 'side-nav-action-button',\n                    'explicit-gmat-override', 'mat-mdc-list-item-interactive',\n                    'mdc-list-item--with-leading-icon', 'mat-mdc-list-item-single-line',\n                    'mdc-list-item--with-one-line', 'ng-star-inserted'\n                );\n                button.type = 'button';\n                button.setAttribute('aria-label', 'Organizador de Conversaciones');\n                button.setAttribute('aria-disabled', 'false');\n\n                button.innerHTML = `\n                    <div matlistitemicon=\"\" class=\"mat-mdc-list-item-icon icon-container mdc-list-item__start\" style=\"margin-left: 0px;margin-right: 0px;\">\n                        <mat-icon role=\"img\" class=\"mat-icon notranslate gds-icon-l google-symbols mat-ligature-font mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"folder_open\" fonticon=\"folder_open\"></mat-icon>\n                    </div>\n                    <span class=\"mdc-list-item__content\">\n                        <span class=\"mat-mdc-list-item-unscoped-content mdc-list-item__primary-text\">\n                            <span data-test-id=\"side-nav-action-button-content\" class=\"gds-body-m\">Mis conversaciones</span>\n                        </span>\n                    </span>\n                    <div class=\"mat-focus-indicator\"></div>\n                `;\n\n                ourButtonWrapper.appendChild(button);\n                discoverGemsButtonWrapper.after(ourButtonWrapper);\n                this.toggleButton = button;\n                \n                if (folderManager) {\n                    folderManager.loadAndDisplayFolders();\n                }\n            }\n\n            if (!this.sidebar) {\n                this.initializeSidebar();\n            }\n            if (this.sidebar && !ourButtonWrapper.contains(this.sidebar)) {\n                ourButtonWrapper.appendChild(this.sidebar);\n            }\n            eventHandler.addEventListeners();\n        }\n    }\n\n    toggleSidebarVisibility() {\n        if (this.sidebar) {\n            this.sidebar.classList.toggle('hidden');\n            // Si el panel se cierra, también cerramos cualquier sección abierta\n            if (this.sidebar.classList.contains('hidden')) {\n                this.toggleSectionVisibility(null);\n            }\n        }\n    }\n\n    toggleSectionVisibility(sectionId) {\n        const createContainer = document.getElementById('create-folder-container');\n        const searchContainer = document.getElementById('search-conversations-container');\n        const createBtn = document.getElementById('create-folder-section-btn');\n        const searchBtn = document.getElementById('search-section-btn');\n\n        // Si la sección clickeada ya está activa, la cerramos\n        if (this.activeSection === sectionId) {\n            sectionId = null;\n        }\n\n        this.activeSection = sectionId;\n\n        // Actualizamos los contenedores\n        if (createContainer && searchContainer) {\n            createContainer.classList.toggle('hidden', sectionId !== 'create-folder-container');\n            searchContainer.classList.toggle('hidden', sectionId !== 'search-conversations-container');\n        }\n\n        if (createBtn && searchBtn) {\n            createBtn.classList.toggle('active', sectionId === 'create-folder-container');\n            searchBtn.classList.toggle('active', sectionId === 'search-conversations-container');\n        }\n    }\n    \n    renderFolders(folders, openFolderStates, eventHandler, dragAndDropHandler) {\n        const foldersListUl = document.getElementById('folders-list-ul');\n        if (!foldersListUl) return;\n\n        foldersListUl.innerHTML = '';\n        const sortedFolderNames = Object.keys(folders).sort();\n\n        for (const folderName of sortedFolderNames) {\n            const folder = folders[folderName];\n            const folderContainer = this.createFolderElement(folderName, folder, openFolderStates, eventHandler, dragAndDropHandler);\n            foldersListUl.appendChild(folderContainer);\n        }\n    }\n\n    createFolderElement(folderName, folder, openFolderStates, eventHandler, dragAndDropHandler) {\n        const folderContainer = document.createElement('li');\n        folderContainer.classList.add('gemini-folder-item');\n\n        const folderHeader = this.createFolderHeader(folderName, dragAndDropHandler);\n        const conversationsWrapper = this.createConversationsWrapper(folderName, folder, eventHandler, dragAndDropHandler);\n\n        folderContainer.appendChild(folderHeader);\n        folderContainer.appendChild(conversationsWrapper);\n\n        const [folderTitle, editButton, deleteButton, expandIcon] = folderHeader.children;\n\n        eventHandler.addFolderInteractionListeners(folderHeader, conversationsWrapper, expandIcon, editButton, deleteButton, folderName, folderTitle);\n\n        if (!openFolderStates[folderName]) {\n            conversationsWrapper.classList.add('hidden');\n            expandIcon.setAttribute('fonticon', 'expand_more');\n            expandIcon.setAttribute('data-mat-icon-name', 'expand_more');\n        } else {\n            conversationsWrapper.classList.remove('hidden');\n            expandIcon.setAttribute('fonticon', 'expand_less');\n            expandIcon.setAttribute('data-mat-icon-name', 'expand_less');\n        }\n\n        return folderContainer;\n    }\n\n    createFolderHeader(folderName, dragAndDropHandler) {\n        const folderHeader = document.createElement('div');\n        folderHeader.classList.add('title-container');\n        folderHeader.setAttribute('role', 'button');\n        folderHeader.setAttribute('tabindex', '0');\n        folderHeader.dataset.folderName = folderName;\n        folderHeader.addEventListener('dragover', dragAndDropHandler.handleDragOver.bind(dragAndDropHandler));\n        folderHeader.addEventListener('dragleave', dragAndDropHandler.handleDragLeave.bind(dragAndDropHandler));\n        folderHeader.addEventListener('drop', dragAndDropHandler.handleDrop.bind(dragAndDropHandler));\n\n        folderHeader.innerHTML = `\n            <span class=\"title gds-label-l gemini-folder-title\" data-folder-name=\"${folderName}\">${folderName}</span>\n            <button class=\"edit-folder-btn\" title=\"Renombrar carpeta: &quot;${folderName}&quot;\" data-folder-name=\"${folderName}\"><mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"edit\" fonticon=\"edit\"></mat-icon></button>\n            <button class=\"delete-folder-btn\" title=\"Eliminar carpeta: &quot;${folderName}&quot;\" data-folder-name=\"${folderName}\"><mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"delete\" fonticon=\"delete\"></mat-icon></button>\n            <mat-icon role=\"img\" class=\"mat-icon notranslate gds-icon-l google-symbols mat-ligature-font mat-icon-no-color gemini-expand-icon\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"expand_more\" fonticon=\"expand_more\"></mat-icon>\n        `;\n        return folderHeader;\n    }\n\n    createConversationsWrapper(folderName, conversations, eventHandler, dragAndDropHandler) {\n        const conversationsWrapper = document.createElement('div');\n        conversationsWrapper.classList.add('conversations-list-wrapper');\n\n        const conversationsUl = document.createElement('ul');\n        conversationsUl.classList.add('conversation-items-container', 'side-nav-opened');\n        conversationsUl.dataset.folderName = folderName;\n        conversationsUl.addEventListener('dragover', dragAndDropHandler.handleConversationListDragOver.bind(dragAndDropHandler));\n        conversationsUl.addEventListener('drop', dragAndDropHandler.handleConversationListDrop.bind(dragAndDropHandler));\n\n        conversations.forEach((conv, index) => {\n            const convItem = this.createConversationElement(conv, folderName, index, eventHandler, dragAndDropHandler);\n            conversationsUl.appendChild(convItem);\n        });\n\n        conversationsWrapper.appendChild(conversationsUl);\n        return conversationsWrapper;\n    }\n\n    createConversationElement(conv, folderName, index, eventHandler, dragAndDropHandler) {\n        const convItem = document.createElement('li');\n        convItem.classList.add('conversation-item-wrapper');\n        convItem.setAttribute('draggable', 'true');\n        convItem.dataset.folderName = folderName;\n        convItem.dataset.convId = conv.id;\n        convItem.dataset.convTitle = conv.title;\n        convItem.dataset.convUrl = conv.url;\n        convItem.dataset.originalIndex = index;\n        convItem.addEventListener('dragstart', dragAndDropHandler.handleDragStart.bind(dragAndDropHandler));\n        convItem.addEventListener('dragend', (event) => event.target.classList.remove('is-dragging'));\n\n        convItem.innerHTML = `\n            <div class=\"conversation-item-content\">\n                <div class=\"conversation-title gds-body-m\" data-folder-name=\"${folderName}\" data-conv-id=\"${conv.id}\" style=\"flex-grow: 1; cursor: pointer;\" title=\"${conv.title}\">${conv.title}</div>\n                <button class=\"delete-conversation-btn\" title=\"Eliminar conversación: &quot;${conv.title}&quot;\" data-folder-name=\"${folderName}\" data-conv-id=\"${conv.id}\"><mat-icon role=\"img\" class=\"mat-icon notranslate google-symbols mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" data-mat-icon-name=\"delete\" fonticon=\"delete\"></mat-icon></button>\n            </div>\n        `;\n\n        eventHandler.addConversationListeners(convItem);\n        return convItem;\n    }\n\n    enableFolderEditMode(folderName, folderTitleElement, deleteBtn, editBtn, expandIcon, eventHandler) {\n        const originalFolderName = folderName;\n        folderTitleElement.style.display = 'none';\n        deleteBtn.style.display = 'none';\n        editBtn.style.display = 'none';\n        expandIcon.style.display = 'none';\n\n        const inputField = document.createElement('input');\n        inputField.type = 'text';\n        inputField.value = originalFolderName;\n        inputField.classList.add('folder-rename-input');\n        inputField.dataset.originalFolderName = originalFolderName;\n\n        folderTitleElement.parentNode.insertBefore(inputField, folderTitleElement);\n        inputField.focus();\n        inputField.select();\n\n        eventHandler.addFolderRenameListeners(inputField, originalFolderName, folderTitleElement, deleteBtn, editBtn, expandIcon);\n    }\n\n    openGeminiChat(event) {\n        const conversationId = event.target.dataset.convId;\n        if (conversationId) {\n            const selector = '.chat-history-list .conversation[jslog*=\"\\\\\"c_' + conversationId + '\\\\\"\"]';\n            const targetConversationElement = document.querySelector(selector);\n\n            if (targetConversationElement) {\n                const clickEvent = new MouseEvent('click', { view: window, bubbles: true, cancelable: true, buttons: 1 });\n                const mouseDownEvent = new MouseEvent('mousedown', { view: window, bubbles: true, cancelable: true, buttons: 1 });\n                const mouseUpEvent = new MouseEvent('mouseup', { view: window, bubbles: true, cancelable: true });\n\n                targetConversationElement.dispatchEvent(mouseDownEvent);\n                targetConversationElement.dispatchEvent(mouseUpEvent);\n                targetConversationElement.dispatchEvent(clickEvent);\n\n                setTimeout(() => {\n                    this.sidebar.classList.add('hidden');\n                }, 100);\n\n            } else {\n                showToast(`No se pudo cargar la conversación rápidamente. Recargando página...`, 'info');\n                window.location.href = `https://gemini.google.com/app/${conversationId}`;\n                this.sidebar.classList.add('hidden');\n            }\n        } else {\n            showToast(\"No se pudo encontrar el ID de esta conversación.\", 'error');\n        }\n    }\n\n    filterConversationsAndFolders() {\n        const searchTerm = document.getElementById('search-conversations-input').value.toLowerCase().trim();\n        const foldersListUl = document.getElementById('folders-list-ul');\n        const folderItems = foldersListUl.querySelectorAll('.gemini-folder-item');\n\n        folderItems.forEach(folderItem => {\n            const folderTitleElement = folderItem.querySelector('.gemini-folder-title');\n            const folderName = folderTitleElement.textContent.toLowerCase();\n            const conversationsWrapper = folderItem.querySelector('.conversations-list-wrapper');\n            const conversationItems = conversationsWrapper.querySelectorAll('.conversation-item-wrapper');\n            const expandIcon = folderItem.querySelector('.gemini-expand-icon');\n\n            let folderMatches = folderName.includes(searchTerm);\n            let anyConversationMatches = false;\n\n            conversationItems.forEach(convItem => {\n                const convTitle = convItem.querySelector('.conversation-title').textContent.toLowerCase();\n                if (convTitle.includes(searchTerm)) {\n                    convItem.style.display = '';\n                    anyConversationMatches = true;\n                } else {\n                    convItem.style.display = 'none';\n                }\n            });\n\n            if (searchTerm === '') {\n                folderItem.style.display = '';\n                conversationsWrapper.classList.add('hidden');\n                expandIcon.setAttribute('fonticon', 'expand_more');\n                expandIcon.setAttribute('data-mat-icon-name', 'expand_more');\n                conversationItems.forEach(convItem => convItem.style.display = '');\n                return;\n            }\n\n            if (folderMatches || anyConversationMatches) {\n                folderItem.style.display = '';\n                conversationsWrapper.classList.remove('hidden');\n                expandIcon.setAttribute('fonticon', 'expand_less');\n                expandIcon.setAttribute('data-mat-icon-name', 'expand_less');\n            } else {\n                folderItem.style.display = 'none';\n            }\n        });\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import UI from './ui.js';\nimport Storage from './storage.js';\nimport FolderManager from './folderManager.js';\nimport DragAndDrop from './dragAndDrop.js';\nimport EventHandler from './eventHandler.js';\n\nclass App {\n    constructor() {\n        this.ui = new UI();\n        this.storage = new Storage('geminiConversations');\n        this.folderManager = new FolderManager(this.storage, this.ui);\n        this.dragAndDropHandler = new DragAndDrop(this.storage, this.folderManager);\n        this.eventHandler = new EventHandler(this.ui, this.folderManager, this.dragAndDropHandler);\n\n        this.folderManager.setEventHandler(this.eventHandler);\n        this.folderManager.setDragAndDropHandler(this.dragAndDropHandler);\n\n        this.observer = new MutationObserver(this.handleMutations.bind(this));\n        \n        chrome.storage.onChanged.addListener(this.handleStorageChange.bind(this));\n        \n        // Nuevo: Oyente para mensajes del background script\n        chrome.runtime.onMessage.addListener(this.handleMessage.bind(this));\n    }\n\n    init() {\n        if (!document.getElementById('gemini-organizer-toast-container')) {\n            const toastContainer = document.createElement('div');\n            toastContainer.id = 'gemini-organizer-toast-container';\n            document.body.appendChild(toastContainer);\n        }\n        \n        window.requestIdleCallback(() => {\n            this.ui.addToggleButton(this.eventHandler, this.folderManager);\n            this.dragAndDropHandler.setupDraggableConversations();\n            this.observer.observe(document.body, { childList: true, subtree: true });\n        });\n    }\n\n    async initializeSync() {\n\n        const syncEnabled = await this.storage.getSyncEnabled();\n        this.storage.setStorageArea(syncEnabled ? 'sync' : 'local');\n        \n\n        const optionsBtn = document.getElementById('open-options-btn');\n\n\n        if (optionsBtn) {\n            optionsBtn.addEventListener('click', () => {\n                console.log('Botón de configuración clickeado. Abriendo página de opciones...'); \n                chrome.runtime.sendMessage({ action: 'openOptionsPage' });\n            });\n        } else {\n            console.error('El botón de configuración (open-options-btn) no fue encontrado en el DOM.');\n        }\n        this.folderManager.loadAndDisplayFolders();\n    }\n\n    handleMutations() {\n        const toggleButtonWrapper = document.getElementById('gemini-organizer-wrapper');\n        if (!toggleButtonWrapper || !document.body.contains(toggleButtonWrapper)) {\n            this.ui.addToggleButton(this.eventHandler, this.folderManager);\n            this.initializeSync(); // Re-inicializamos si el botón se recrea\n        }\n        this.dragAndDropHandler.setupDraggableConversations();\n    }\n\n    handleStorageChange(changes, namespace) {\n        if (namespace === 'local' && changes[this.storage.key]) {\n            console.log('El almacenamiento ha cambiado. Recargando las carpetas para mantener la sincronización.');\n            this.folderManager.loadAndDisplayFolders();\n        }\n    }\n\n    handleMessage(request, sender, sendResponse) {\n        // Nuevo: la acción ahora incluye el nombre de la carpeta\n        if (request.action === \"save_current_conversation_to_folder\") {\n            this.folderManager.saveCurrentConversation(request.folderName);\n        }\n    }\n}\n\nconst app = new App();\napp.init();"],"names":[],"sourceRoot":""}